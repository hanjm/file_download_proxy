// Code generated by go-bindata.
// sources:
// static/favicon.ico
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x92\xb1\x4a\x03\x51\x10\x45\xef\x92\x48\x10\x2d\xb6\x4a\x23\x48\x2c\x02\xe2\x4f\x18\xb0\xf7\x2b\xa6\xb0\xb4\x13\x23\xa8\x8b\x7f\x20\x29\x6c\xb5\xf2\x03\xbc\x85\x9d\x56\x82\x1f\x60\x27\x88\x22\xb6\x2a\x78\x4d\x21\xae\x3c\xf7\x81\xc3\xb2\xbb\xd1\x4a\xc8\xc0\x65\xd8\xb9\x73\x86\x7d\xef\x0d\x90\x20\x41\x9a\x86\xdc\xc3\x46\x1b\xe8\x02\x58\x06\x90\x02\xe8\xa1\xa8\x7f\x47\x1b\xe8\x77\x0b\x4d\x53\x88\x96\x88\xb6\x25\xda\xa3\x68\xf9\x04\xbd\x89\x76\x2c\xda\x9c\xe3\xb7\x6b\x7a\xaf\x1a\xe6\x1c\x39\xfe\xa9\xc2\xdf\x8b\xde\x6e\x0d\xff\xe0\xf8\xf7\x92\x37\x2c\x9d\xaf\xea\xff\xae\x9d\x7f\xe6\xe7\x8a\xb6\x29\xda\x20\x7a\x83\xf8\x7d\xef\x7a\xc6\xa2\xad\x39\x7e\x41\xb4\x9b\xd2\xfc\x51\xf4\x46\xa5\xfa\xb3\x68\xfd\x8a\x37\x58\xfa\x25\x1f\x34\x5f\xc1\xcf\x88\xf6\xe2\x7a\x6e\x45\x3b\x8d\xf9\x53\xb4\x8f\x58\x3f\x6f\xd8\x83\x9d\x9a\xbb\x3e\x11\x6d\x45\xb4\x75\xd1\x3a\x13\xf6\x68\x28\xda\x6b\xe4\xc2\xbb\x1c\x36\x31\x35\x73\xc2\x59\x16\x45\x9b\xfd\x0b\xf7\x1f\x91\xe7\x3f\xda\x4f\x0a\x65\x09\x70\x90\x15\x39\x6b\x01\x97\x2d\xe0\xa2\x03\xdc\x05\xad\x02\x63\xc7\x7c\x05\x00\x00\xff\xff\x46\x55\x8c\xe9\x7e\x04\x00\x00")

func staticFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_staticFaviconIco,
		"static/favicon.ico",
	)
}

func staticFaviconIco() (*asset, error) {
	bytes, err := staticFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/favicon.ico", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1488024499, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5b\xff\x8f\xdc\x36\x76\xff\xdd\x7f\x05\x43\x3b\x19\x8d\x77\x47\x9a\xb5\xeb\xab\x6f\x76\x66\x82\x24\xeb\xa4\x46\x93\x38\x38\x6f\x5a\x14\x46\x30\xe0\x48\x9c\x11\x6d\x0e\xa5\xa3\xa8\xfd\x72\xc1\x02\x41\x01\xe7\x52\x1b\xbe\xb8\xcd\x35\x69\xcf\x6e\x2e\xb9\x26\x97\x00\xed\xe5\x0c\xf4\x60\xe7\xbc\xe7\xe4\x9f\xd9\x99\x5d\xff\x17\x05\x49\x49\xa3\xef\x3b\xbb\xeb\x20\xa7\x1f\x66\x25\xf1\xf1\xc3\xf7\x1e\x1f\xdf\x17\x52\xdb\x7d\x6e\xed\xca\x2b\xeb\xff\xf4\xd6\x25\xe0\x8a\x09\xed\x9f\xea\xca\x3f\x80\x22\x36\xee\x41\xcc\xa0\x7c\x81\x91\xd3\x3f\x05\x00\x00\xdd\x09\x16\x08\xd8\x2e\xe2\x01\x16\x3d\x18\x8a\x51\xeb\x22\x8c\x9a\x9e\x6b\xb5\x74\x33\x43\x13\xdc\x83\x1b\x04\x6f\xfa\x1e\x17\x10\xd8\x1e\x13\x98\x89\x1e\xdc\x24\x8e\x70\x7b\x0e\xde\x20\x36\x6e\xa9\x87\x65\xc2\x88\x20\x88\xb6\x02\x1b\x51\xdc\x5b\x81\xfd\x56\x2b\x05\x47\x09\xbb\x01\x38\xa6\x3d\x18\xb8\x1e\x17\x76\x28\x00\xb1\x3d\x06\x81\xcb\xf1\xa8\x07\xad\x11\xda\x90\xcf\x26\xb1\xbd\x54\x4f\x41\x04\xc5\xfd\xd9\xc7\xbf\xdc\xdb\x7d\xb8\xf7\xed\xed\x83\x27\x4f\xf6\x76\xff\x7b\xff\xee\xfb\xb3\xfb\x77\xa6\xb7\x3e\xef\x5a\xba\x5d\xd3\x1e\x65\x04\x20\xb6\x7d\xdc\x83\x64\x82\xc6\xd8\xda\x6a\x29\xba\x34\x4c\xd4\xc5\xb2\x1d\x66\x0e\x3d\x4f\xd8\x41\x60\xda\xde\xc4\x92\xf7\x81\xe0\xc8\xb7\xce\x9b\xe7\xcd\xbf\xb5\xec\x20\x98\xbf\x33\x27\x84\x99\x76\x10\xc0\x88\x0b\xb1\x4d\x71\xe0\x62\x2c\x62\xe8\xc0\xe6\xc4\x17\x20\xe0\x76\x19\xf6\xf5\x9f\x87\x98\x6f\x5b\xe7\xcd\x15\x73\x25\x7a\x50\x88\xd7\x03\xd8\xef\x5a\xba\xef\x42\x40\x79\x26\xaf\xe7\x79\x2c\x43\x94\xcc\xea\x7b\x79\x99\x13\x44\x58\x4b\xce\x36\x22\x0c\x73\xf0\x6e\xd2\x22\x2f\x1f\x39\x0e\x61\xe3\x0e\x38\xd7\xf6\xb7\x56\x33\x4d\xd6\xd9\x09\xe2\x63\xc2\x5a\xc2\xf3\x3b\xe0\x82\x6c\x3f\x6b\x25\x14\x3b\xa7\x92\x5b\x81\x86\x14\xe7\x70\xd5\xbb\x16\x45\xdb\x5e\x28\x3a\x60\x44\xb6\xb0\xb3\x5a\xda\xd7\x91\x72\xfa\x14\x0b\x3c\xe0\x48\xe4\x61\x12\xf6\xda\x15\xbd\x97\x81\x70\xf3\x43\xe3\x2d\xd1\x42\x94\x8c\x59\x07\xd8\x98\x09\xcc\xb3\x72\x6d\x7a\xdc\x69\x6d\x72\xe4\x77\xc0\x90\x63\x74\xa3\x25\x5f\x54\x33\xa7\x56\xc9\x80\x62\x36\x16\xee\xb2\x7c\x15\x08\xc4\xc5\x40\x90\x09\x0e\x04\x9a\xf8\xfa\x9d\x8f\xb1\x93\xe3\xc3\x21\x81\x4f\xd1\x76\x07\x30\x8f\xe1\x52\x7c\xd3\xe7\xde\x98\xe3\x20\xa8\x9c\x1e\x6f\x03\xf3\x11\xf5\x36\x3b\xc0\x25\x8e\x83\xd9\x21\x30\xa3\x90\xd2\x1c\x82\x5a\xd0\x1d\xf0\x93\xc2\xf4\xba\x98\x8c\x5d\x51\xd6\x32\xf4\xb8\x83\x79\x07\x5c\xf0\xb7\x40\xe0\x51\xe2\x80\xd3\x17\xec\xe1\xc5\x0b\x76\x19\x59\x8b\x23\x87\x84\x81\x34\x90\xe7\xf3\xf6\x63\x53\xe2\x77\x00\xc7\xb6\x30\xda\xfe\xd6\x32\x38\xaf\x7e\x7f\xa2\x7e\xdb\xcd\xb4\x35\xc9\xcb\xf7\x02\x22\x88\xc7\x3a\x00\x0d\x03\x8f\x86\xe2\x30\xa5\x71\x29\xc0\x5f\x8d\xb8\x87\x08\x9b\x35\x51\x8e\x58\x30\xf2\xf8\xa4\x03\xb8\x27\x90\xc0\xc6\xca\xc5\xb6\x83\xc7\x39\xb2\x23\x6b\x44\x5a\xb5\x8f\x79\x8b\xe2\xd1\x0f\xa3\x18\xdb\xb6\x8f\x2f\xf5\x61\x1a\x3c\xb6\xb8\x3f\x9c\x21\xfc\xa0\xf2\x5a\x67\xab\xed\xe0\xa4\x6b\x83\x85\x93\x61\xc1\x9b\x1c\x43\x27\x94\x30\xdc\xaa\x6e\xae\xf3\xb5\x3b\x3a\x1c\x59\x51\x3c\xea\x5a\x3a\x61\xe9\x0e\x3d\x67\xbb\x7f\xaa\xcb\xd0\x06\xb0\x29\x0a\x82\x1e\x64\x68\x63\x88\x38\xd0\x7f\x5a\x0e\x1e\xa1\x90\x0a\x30\x1c\xb7\x08\x1b\x79\x71\xc4\x75\x48\x42\x9f\x78\xcb\xd6\x88\x86\xc4\x81\xf3\x60\x97\xa6\x8a\xe0\xe4\xa8\x98\xa7\x68\x14\x1d\xca\x51\x0d\x39\x62\x4e\x9c\x5f\x9c\x86\xfd\x6e\xe0\x23\x16\xd3\x8c\xe9\xb6\xef\xca\xc4\x02\x24\x77\x2d\x9b\x7a\xa1\xd3\x72\xbc\x4d\x46\x3d\xe4\xc0\xfe\x0b\x6c\x18\xf8\xab\x5d\x4b\xf6\xeb\xbf\x4a\x28\x06\x6b\x51\x1b\x78\x8b\x7b\x5b\xdb\x5d\x0b\xa5\xd8\xb4\x1c\xb2\x91\x7a\x0c\x69\x8a\x9d\x58\x0f\xa9\x5b\x65\xe0\x79\x11\x28\xe9\x77\x51\xc4\xb1\x2b\x84\x1f\x74\x2c\x6b\x4c\x84\x1b\x0e\x55\xea\xe0\x22\x76\x7d\x62\x8d\x08\xc5\x83\x98\xcb\x81\x2f\x39\x81\x40\x20\x3e\x96\x89\xe2\x60\x48\x11\xbb\x91\xc3\x55\xd8\x87\x49\xef\x62\xc4\x85\xca\x3c\xa4\xb8\x5a\xf6\x7f\x20\x78\x13\x5c\xf5\x42\x6e\x63\x60\xbc\xe6\xc9\x54\xb5\x29\xa5\xee\x5a\x94\xa4\x45\x0f\x69\x34\xa3\x5a\x09\x5d\x8b\x21\xf9\x27\x35\x73\xd9\x8c\xa5\xc4\x00\x10\xc5\x3c\x49\xc5\xe6\xba\xec\x66\xb5\x2a\x17\x56\xdc\x43\xdd\xcb\x9f\x96\xeb\x71\xf2\x0b\x89\x4d\x21\x20\x4e\x0f\x86\x9c\xb6\x08\xf3\x43\xd1\x92\xcd\x79\x25\xa7\x06\x55\xbd\xc7\xdc\x0b\x7d\x60\x7b\xb4\x15\x4c\x5a\x2b\xe7\x34\x84\xe2\xb7\xa4\x77\xd1\x6e\x75\xb7\x76\x09\x9d\xa2\x55\x7c\x64\xc6\x93\x5a\xe0\xde\x9c\x55\x18\xe5\xf1\xea\xd6\xa7\xc8\xc6\xae\x47\x1d\xcc\x7b\xf0\xe0\x8f\x8f\x0e\xbe\xfb\x68\x7a\xf3\x4b\x9d\x5c\x4f\xef\x3f\x98\xfe\xd7\x7b\x40\x1a\x86\x35\x41\x63\x86\x05\x30\xa6\xbb\x8f\x0f\xbe\xf9\x66\x76\xfb\xe3\xe9\xbd\x4f\x67\xf7\xff\x77\x7a\xff\xc1\xec\x93\x87\x7b\x4f\xbe\xdf\xff\xf5\xd7\x07\xdf\xdf\x7c\x7a\xef\x91\xf5\xaa\x47\xb7\xf6\xff\xf0\x2f\x7b\xdf\x7e\xb4\xf7\xed\x6f\x22\xa0\x47\x5f\x4e\x6f\x3e\xda\xdb\xfd\xf2\xe0\xbb\xef\xa6\x1f\x3c\x98\xdd\x7f\x6f\xfa\xc5\x57\x4f\xdf\xfb\xed\xf4\xf1\xef\x9b\x65\xf2\x66\x4d\x3b\x79\x3d\x0c\x85\xf0\x58\x94\xac\xeb\x07\x18\x4b\x3a\x14\x0c\x0c\x05\x6b\x05\xa1\x6d\xe3\x20\x88\xd5\x1b\x69\xd7\xe6\x18\x89\x94\x11\x0b\x14\xdc\x80\x7d\xcd\x5c\xd7\xd2\x50\xb9\x59\xcb\x2d\x2f\x4b\xaa\xb2\x68\x2d\x7e\xb2\x68\xfd\xb8\x46\x51\x99\x6c\xc4\x95\x7a\x48\xfb\x16\x21\x5d\x49\x32\x3b\x84\xe2\x40\x39\xa8\x96\x7a\x9f\x21\xe4\x39\x7e\x84\x0b\x94\x17\x8c\x8a\xad\x28\x9b\x86\xfd\xe9\xe3\x0f\xa7\x1f\x3e\xea\x5a\xc2\x2d\x74\x88\x2a\xa5\xe9\xdd\x3b\xa5\xcd\x39\xbc\x95\x73\x11\xe0\x17\x5f\x4d\x1f\x7c\xb8\x48\x8f\x8b\xba\x83\x9e\xc8\x23\x74\x38\xf8\xfe\x5e\x55\x87\x7e\xda\xf2\x2a\x84\x7a\x7c\x77\x21\x71\xda\x91\x38\x7f\x79\x6f\xfa\xd5\xed\xd9\x27\x0f\x9f\x7e\xf2\xa7\x23\xf0\xb8\xff\xeb\xaf\x67\x9f\x3c\x3c\x42\x87\xd9\x47\x77\xf6\x9e\xdc\xcf\x76\xe8\x5a\xe9\x69\x94\x6d\x49\xbd\xad\xb1\x64\x1c\x53\x06\x9a\x32\x85\x94\xd3\xea\x5a\x42\x47\xba\xa8\xbb\xb4\xa6\x4c\xcd\x37\xc7\xda\x40\x1c\xbc\x7a\xf9\xf5\x4b\x83\x97\xde\xba\x0c\x7a\x40\x79\xf3\x8e\x65\xbd\xfb\x2e\x30\x5f\x26\xcc\x19\x20\xc7\xe1\x60\x67\xc7\x52\xee\x5b\xb9\x74\xb8\x5a\xe8\x7c\x35\xea\x9d\x00\x2d\x01\x18\xe4\xe8\xd6\xae\xfc\xe3\x9b\xaf\x5f\x79\x69\x6d\xf0\xf6\xcf\x5e\xaf\x1b\x28\x5e\x6b\x56\xae\xff\xdf\xbd\xfd\xc6\x4b\x6f\x0e\x7e\x76\x49\x22\xbc\x79\x79\x1d\xf4\xc0\x35\xf8\x32\x5c\x06\xf0\xef\xd5\xef\x1b\xea\xf7\x35\xf5\xbb\xae\x7e\x2f\xbd\x0c\xdf\x99\x43\x8c\x42\x66\xcb\x2c\x46\x39\x62\xb9\xa6\x93\x22\xca\x48\xee\x9a\xb9\x9c\x85\x63\x11\x72\x06\x18\xde\x04\x6b\x32\x41\x4a\x08\xc1\x59\x69\x26\x6d\xb0\x04\xce\x5d\xbc\xd8\x96\x57\xd3\x14\xde\xe5\xab\x57\xae\x0a\x4e\xd8\xd8\x68\x9a\x41\x38\x0c\x04\x37\xda\xcb\x60\xe5\xa7\x4d\x93\x63\xe5\x2e\x0d\xb8\x2e\x19\x03\xb0\x99\x4b\x54\x32\x0c\x8e\xb1\x18\xb8\xe1\x04\xb1\x01\xc7\xc8\x19\x04\xe4\x17\xd8\x90\x3f\x79\xee\xa4\x52\x08\x73\xf0\x16\xe8\xa5\x4b\x54\x85\xe5\x71\x60\xac\x02\xd9\x0b\xf4\xc1\x4a\xfb\xdc\xdf\xac\x6a\xd2\xa5\xa5\x3c\x8a\xbc\x14\x9d\xd5\xd3\x84\x99\xd6\x9d\x32\x7d\xbc\x81\x84\x6b\x72\x2f\x64\x8e\xe2\x4b\x2b\xa3\x09\x2c\xf9\x07\x2c\xe5\x27\xea\x9a\x1a\xf8\x9d\x12\x89\x2d\x2b\xbe\x9b\xdd\xfb\xd3\xec\xe3\x07\x7a\x79\xef\xff\xea\x8f\x45\x9d\x84\xbe\x23\xe7\xcc\x26\xdc\x0e\x29\xe2\x83\x38\xd7\x34\xe2\x9b\x01\xa6\x78\x82\x99\x58\x06\x99\x92\xbe\x4c\x67\x51\xe6\x3e\x90\x85\xca\x40\xa7\xbe\x03\x07\x8f\x8b\x5a\x4c\x13\xab\x2c\xa8\x96\x9a\x8c\x80\x91\xdd\x4e\xe8\xf6\xc0\x85\x76\x99\xbe\x6b\x40\x57\x2e\x4a\x15\x66\x71\x2c\x70\xa1\x2d\x95\x7c\x31\x37\xa2\xbc\xf2\xf2\x9b\x23\xc2\x1c\x03\xe6\x0a\x55\xd8\x34\x5d\xe2\x60\xa3\x79\x0c\x80\x4c\xa1\x03\x9b\x66\xe0\x7a\x9b\x79\xa0\xac\x99\x60\x1a\xe4\xf7\x52\xd2\x52\x17\xf5\x9e\xd3\x5b\x4b\xa9\xed\x99\x48\x5d\xc6\xec\xb1\xa4\x2e\x53\x5f\x56\xea\x85\x21\xa5\xfc\xb0\x69\xda\x41\x60\xc0\xa4\x08\x93\x7e\x21\x2a\xc3\x20\x58\xaa\xd4\xd5\x12\x80\xb2\x44\x83\xf9\x62\xfd\xa8\xe2\x2c\x34\x78\xc1\x3c\x4b\x46\x2f\xf1\x5f\x23\x2c\x6c\x77\xa0\x02\xd3\x40\x06\x26\xa3\x6c\x11\x9e\x99\xef\x3a\xf5\xc0\x19\x03\x9e\x2e\x0d\x64\xcd\xe2\x82\xd4\x9b\x61\xb2\x53\x42\x66\xda\x2e\xa1\x0e\xc7\xcc\x68\x08\xde\x68\x9a\x9a\x24\xdb\xf5\x8c\x89\xae\xa3\x2d\xa3\x68\x95\x21\xa7\x9d\x79\x0c\x5b\x2e\xb4\x4f\xb0\x70\x3d\xa7\x03\xe0\x6b\x97\xd6\x61\x76\xfa\x9b\xa6\xe3\x31\x6c\x24\x82\x1b\x0e\x12\x48\x0a\x3b\x77\x6c\xf1\x65\x7b\x2c\xf0\x28\x36\xa9\x37\xd6\x54\x45\x93\x94\xc2\x71\x6f\x73\x60\x7b\xa1\xac\x65\xa5\x2f\x28\x12\x29\xc7\x2e\x29\x55\x6d\x25\xd3\x71\x40\x18\x88\xc7\xcd\x53\xc7\xb0\x8a\x58\xaa\x16\xf4\x14\xed\xb5\xa4\xf7\x3b\xc5\x21\xe2\x4e\x42\x87\x1e\xd0\x2b\x0d\x48\x09\xa4\x79\x55\x85\xa6\x25\x00\x81\x05\xa4\xf5\xd4\x53\xbf\xa2\xf7\x34\x5f\x57\x53\x54\xa2\x85\xd4\xe8\x49\xd2\xad\x37\x38\x0f\xe5\x43\x52\x29\x46\xac\x74\xea\x91\x07\xce\xba\x9a\x1e\xa8\x60\x0d\xf4\x7a\xa0\x0d\x5e\x04\x6d\xd0\xd1\xf1\xce\xc6\x84\xe6\xa4\x06\x56\x65\x6f\x1d\x12\xcb\xb9\x90\x81\x62\xde\xef\x72\x10\xd7\xea\x92\xfb\xf2\x39\x04\xca\x82\xb2\x7c\xaf\xb4\xdb\xa5\xb4\x3b\x75\x2a\xcd\x83\xc0\x54\x85\xd8\x28\x6e\x08\x37\xfa\xba\x64\x29\xa5\x1a\x85\x94\xd6\x12\xa4\xfd\xdd\x42\x84\xca\xdf\xd4\x52\x1e\x4e\xa1\xf7\x9e\x1a\x7d\x58\x88\xa2\x4b\x00\x3e\x1f\x75\x54\xbf\x35\x36\x92\x36\xbe\x90\x53\xa9\xa8\x56\x05\xf9\xf1\x26\xb3\x64\x80\x78\x3b\xa5\x21\x39\xcf\xe4\xca\x4b\x29\x2b\x7b\x95\x50\xfc\xa6\x5c\xf5\x4b\x00\x6a\x21\x17\x22\xed\x5a\xa8\x4a\xde\x5a\x7b\x09\xd4\x8e\x4a\xc4\x62\xca\xf8\xd5\xeb\xb7\x39\x4d\x12\x5b\xab\x6b\x8d\x97\x01\x7c\x81\x8a\x55\x38\x4f\x77\xad\xbe\x7e\x3b\xce\xbe\x85\xfa\xed\xcf\x43\x2f\xfb\xbe\xa1\xdf\x9f\x3e\xff\xd3\xd5\xbc\xe7\xcf\xf3\x95\x1c\x83\x48\xbe\x0a\x09\x7d\x8a\x53\x49\xb8\x4e\x26\xf8\xaa\xca\xef\xeb\xa7\x3c\xe4\x48\xf9\xf1\xb4\xa8\xe9\x19\x05\x2f\xa6\x1a\xd6\x62\x6a\xe9\xf9\xf6\xbf\xfa\x37\x08\x3a\xd5\x56\x52\x60\x5b\x57\x11\x19\x9d\x66\x38\x8d\x0a\x8c\xd5\x92\x50\x22\xaf\xbd\xdd\x9b\x51\xca\xfc\xf9\xd7\xb3\xcf\xfe\x32\xfb\xf7\x07\xb3\x3b\xdf\xec\x7d\x7b\x67\x7a\xeb\xeb\xb5\x2b\x6f\x00\xe6\x39\xb8\x92\x8f\x33\x82\x57\x9b\x72\x3a\x00\x75\x7b\x51\xb0\xad\xb3\xe4\x33\x42\x07\xf0\xca\x68\x7c\x2d\x0d\xd9\x02\x2b\xef\x54\x4c\x02\x38\xf6\x62\x8a\xd8\x30\x39\x9e\x78\x1b\xf8\x15\xe9\x10\x0c\x18\x6f\xe0\x36\x0b\xaf\x1d\xc4\xc6\xc5\xd4\x22\x7d\xed\x54\x65\xb0\x75\xbc\x5e\xe2\xdc\xe3\x87\xb1\x19\xb3\x8a\x1c\xa7\xc8\x50\x85\x00\xd5\x7c\x2e\xcc\x6b\xe9\xb0\xc7\x56\x0f\xa8\xf4\x1a\xf5\x2d\x92\x83\xb9\x6d\x98\x94\x30\x3c\x60\xe1\xa4\xd1\x34\x05\xde\x12\x69\xd3\xab\x19\x3c\x07\x22\x67\x40\xe6\x31\x31\x48\xd1\xfd\x2d\x8e\xa5\x53\x0b\x99\x55\xc4\x68\x51\x0a\xb4\x38\x44\x36\x65\x49\xc1\x64\x1b\x16\x07\xcc\x84\xb0\x46\x53\xe7\xf5\x8d\xfc\x51\x4b\x3c\x50\x31\xe0\xd5\xcd\x63\x15\xef\x21\xa7\x8d\xa6\xe9\x8a\x09\x35\x72\x71\x6a\x71\xb0\x79\xe0\x48\xeb\x32\x79\x79\x04\xa0\xc4\x65\xa6\x81\x92\x97\x47\x10\x2f\xf2\xd7\xe9\x49\x89\x5e\x35\x57\x4f\x2d\xcc\x4e\x7a\x5e\xf3\xb9\xe7\x11\x66\x35\x7d\xb0\x5f\x84\x5b\x24\x49\xae\xd5\x95\x0a\x2f\xa5\x0a\x0b\x6a\xe2\x60\xe2\x4b\xca\x83\x8e\xbc\xa6\xbf\xfb\x74\x7a\xeb\x33\xc1\x8b\xd1\xa7\x92\x49\x15\xfb\xf0\xc4\xa7\x3a\xe5\xbc\x56\x51\x72\x80\x13\xf9\xff\x78\x00\xd3\x0f\x03\xd7\x80\x5d\xc1\xfb\x3f\x9e\x87\x2f\x32\x13\xa7\xa9\x89\x7f\x6d\xd4\xb2\x07\x6a\xfd\x28\xa8\xde\x62\x39\x12\x27\x52\xac\x93\xf0\x51\xdd\x52\x18\x36\x3e\xb9\x68\x24\x4e\x5f\xe5\xae\xe9\xd4\x40\x65\xa9\xc2\xa9\xe5\xa7\x1a\x37\x89\x03\x0a\xb7\x2a\x09\x3e\x36\x7c\x2a\x34\xa8\x01\xe2\xda\xf8\x64\xa8\xb9\x68\x11\x23\xe7\xea\xde\x93\x8d\x91\x0d\x20\xf1\x10\x85\x40\xf1\x2c\xa4\x90\xce\xbe\x20\x83\x2c\x1d\x4e\x86\x9f\x0a\x25\x89\xee\xe7\x65\xc9\x09\xb1\xe7\xd1\x25\xc1\x9e\x97\x16\x27\xd4\x4b\x1c\x70\x12\x9d\xa4\x2a\x86\x93\xe0\x62\x35\x73\xd2\xc6\x1b\xfd\xcc\xd1\x66\x43\x3f\x34\x92\x35\x1e\x1d\x6d\x46\x1f\x35\x34\xa2\x23\xc7\xe9\x07\x9f\x3d\xfd\xcf\x2f\xe2\xe3\xc7\xe8\x0c\xf3\x44\x26\x96\x89\x66\xb9\x15\x98\xdd\x17\x39\xe1\x74\xcd\xd7\x49\x2e\xf6\x3e\x33\x3b\xd0\x91\xb3\x68\x0c\xba\x60\x3b\xce\x28\xd6\x21\xb1\x28\x55\x39\x21\xdf\xc7\xcc\x31\x12\x84\xeb\x1e\x61\x06\x84\xcd\xfa\x14\xe0\xd9\xd4\x5f\xe5\xde\x3c\xd5\x79\x69\xa9\xaa\x1a\xad\x3a\xbd\x49\x5f\xaa\xf2\x8c\xd3\x56\xc9\x71\x6d\x9e\x5b\xce\x62\xe5\x21\x50\x02\x9c\x3f\xfd\x29\xc7\xa9\x4e\x6f\xf6\x77\xff\x75\xfa\xcd\x6f\xf4\x02\xd9\x7b\x7c\x7b\x6f\xf7\x61\x29\xc0\x19\x03\x9a\xa9\x65\x08\x9b\xa6\x37\x1a\x19\xd0\xa6\xc4\xbe\x21\x1f\x58\x7c\xbf\x3c\xdf\x15\x2f\xec\x82\xe7\xb5\x13\x87\x30\x35\x9d\xc2\x25\x41\xd3\xf4\x11\xc7\x4c\x18\xcd\x78\x3b\x3f\x26\x81\x51\x66\x57\x63\x17\x4a\xdf\x01\xa6\xa3\x39\x5c\x35\x71\x7a\x77\x3a\xf2\x2f\x8d\x66\xb5\xc9\x55\x6d\xa5\xa7\xaf\x64\x5b\x3d\x3e\x0e\x7e\x31\x66\xbe\x17\x2f\x5f\xf9\x50\xdc\x6f\x4f\x5f\xc9\xde\xbb\xe6\x09\x56\x53\x57\xef\xc5\xd7\xe1\x2b\x05\xcd\xb5\xac\x4b\xe1\x3a\xad\x82\x68\xf2\xf5\x37\x40\xcd\x54\x41\xad\xde\xc4\x1f\x91\xc8\x16\xbd\x94\x15\x17\xd9\x1a\x5b\x53\x2e\xb0\x0b\xd1\x34\x47\x88\xd0\x94\x48\x5b\x2e\x5f\x06\x9e\x2f\x1f\x96\x01\xe6\x87\xe6\xa2\x75\x9c\x26\x9b\x0e\x11\xa3\x5b\x2e\x37\x39\x0e\x7c\x8f\x05\x78\x1d\x6f\x09\xe5\xea\x86\xdc\xea\xe7\xb7\x08\x72\x82\xd6\xf1\x5f\xee\x67\x8a\xaf\x8b\xae\x47\xa6\xde\xd1\x41\x4f\xbf\x97\x76\x42\x55\x22\xd7\x38\x40\x33\xa0\xc4\xc6\x46\xce\x0d\x36\x9b\x26\x46\xb6\x6b\x2c\xb6\x3e\xe3\x05\x59\x6f\x21\x87\x8a\x76\xbc\x29\x3d\xe1\x34\x62\xce\x8f\x37\x99\x3b\xe5\xc7\x7c\x85\xd3\xbd\xec\x67\x1a\x23\x8e\x03\x77\x40\xa4\x9e\x37\x10\x05\x3d\x10\x60\x71\x39\x7a\xaa\xd1\x76\x1d\xec\xce\x32\xb8\xd0\xce\x1c\xa7\xcc\x3d\xb8\xfe\xec\x6c\xf6\xf9\xfb\xd3\xf7\x6f\x4e\xef\x7d\x7a\xf0\xe4\xf7\x4f\xff\x63\x77\xf6\x87\xdf\xcd\x3e\xbc\xbb\xf7\xf8\x8b\x91\xc7\x27\xd3\x3f\x3f\xdc\xff\xe7\x3f\x4f\x7f\xb9\xab\xbf\x10\x3a\x95\x52\xeb\xe9\xdc\xf7\x77\xda\x75\x07\xe1\x70\x42\x44\xc6\x77\x17\xbe\x23\xc0\xa6\xcf\xf1\x06\x66\x62\x4d\xe7\x56\x97\xe4\x7d\x56\x7d\x8e\x67\x87\xea\x2c\x76\x8c\xc5\x25\x7d\x2c\xfb\xf2\xf6\x65\xc7\x28\xff\xa6\xac\x69\xaa\x88\x91\x11\x3b\x75\x2f\x99\xad\xe8\xb7\x58\xb4\x51\xf1\x20\xe4\x74\xa0\x3f\xf3\xeb\xc5\xe2\x97\x1d\xb1\xea\xed\xfe\x39\xb5\x29\xa7\x2e\x47\x97\x6b\x85\x79\x1c\xb9\x82\x25\xce\x73\x3d\x00\x61\xa9\x55\xd7\x45\x91\x4c\xf4\x28\xf7\xfa\x49\x6c\x78\xeb\xca\xd5\xf5\x8a\xc8\x20\xbd\x6f\xa7\x66\x59\xab\x61\x42\x4e\x17\x4c\x88\x8e\x16\x64\x8e\x1c\x27\x0e\x59\xa5\xf3\x88\x51\x91\x85\x3d\xda\x9d\xde\xfa\x6c\x6f\x77\x77\x7a\xeb\xf3\xd9\x07\x77\xa7\xb7\x7e\x3b\xbd\xfb\xab\xfd\xff\xb9\x3d\xbd\xf3\x7f\xd3\x0f\x1e\xcd\x3e\x7e\x50\xca\xa5\x4d\x31\xe2\xf3\xf5\x99\x59\xbc\x15\x6e\xae\x6e\xa9\x66\xe8\x8e\xe7\x09\x8e\x33\x54\xd1\x43\x24\x2d\xc7\x8e\xa2\x3f\x4e\xf4\xcc\xc5\x90\x9d\x52\x6f\xb0\x98\x22\xcf\x18\x50\x70\x73\xbe\xd3\xaf\xe2\x5d\x61\xc0\xc3\x27\x42\x1f\x1a\xb9\x24\x38\x2c\x95\xd4\xc7\xeb\xe9\x62\x10\xf4\x80\x8f\x78\x80\x2f\x33\x61\x28\x88\x79\x6c\x86\xb9\x5d\xd0\x24\xa7\xad\x01\x2f\x9e\x9f\x55\xa3\xe7\x68\x17\x82\x8f\xbe\x33\xa8\x01\x95\x14\x8b\x40\x45\xe7\xeb\x39\x24\x9d\xc6\x3b\x64\x23\xbf\x81\x9f\x40\x9a\x82\x93\x89\x01\x9f\xaf\xac\xf9\x24\x38\xc3\x9b\xf1\x01\xbe\xb1\x26\xeb\x44\xe6\x6d\x1a\x4d\xd0\xca\xeb\x27\xfa\x24\xaf\x0d\xce\x46\xa2\x59\xf9\xe9\x51\xa7\x8c\x55\x0e\x05\xe4\x2a\x83\xfc\xbf\xa3\x15\xfe\x17\x4d\xf2\xb4\x9c\x70\x57\xf3\xf5\x43\x22\x40\x5f\x2b\xea\x85\x17\xe6\x32\x75\xf5\xc7\x84\x35\x4e\xbb\xb2\x0a\x94\x3a\x4e\x8d\xbf\xa8\x57\xcf\xbc\x69\xe6\xb2\x0e\xfd\x3c\xff\x2f\xc7\x53\xc9\x7f\x0e\x44\xff\x4a\x62\xe9\x7f\x91\xfd\xff\x00\x00\x00\xff\xff\x75\xf6\xd6\x36\x33\x3b\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 15155, mode: os.FileMode(420), modTime: time.Unix(1488038607, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/favicon.ico": staticFaviconIco,
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{staticFaviconIco, map[string]*bintree{}},
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

